{{- if eq .Values.type "statefulset" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}
spec:
  podManagementPolicy: OrderedReady
  {{- if .Values.service.clusterip }}
  serviceName: "{{ .Release.Name }}-clusterip"
  {{- end}}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ .Release.Name }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- if .Values.initContainers }}
      initContainers:
        {{- toYaml .Values.initContainers | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Release.Name }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: PUID
              value: "556"
            - name: PGID
              value: "556"
            - name: TZ
              value: "GB"
            {{- if .Values.containerEnvs }}
            {{- range .Values.containerEnvs }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            {{- end }}
            {{- if .Values.containerEnvsConfigMap }}
            {{- range .Values.containerEnvsConfigMap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ .configMap }}
                  key: {{ .name }}
            {{- end }}
            {{- end }}
          {{- if .Values.resources.enabled }}
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
              gpu: {{ .Values.resources.limits.gpu }}
          {{- end }}
          {{- if .Values.containerCommands }}
          command:
          {{- toYaml .Values.containerCommands | nindent 12 }}
          {{- end }}
          {{- if .Values.containerArgs }}
          args:
          {{- toYaml .Values.containerArgs | nindent 12 }}
          {{- end }}
          {{- if .Values.service.enabled }}
          ports:
            {{- if .Values.service.loadbalancer }}
            {{- range .Values.service.loadbalancer }}
            - name: {{ .name }}
              containerPort: {{ .port }}
            {{- end }}
            {{- end }}
            {{- if .Values.service.clusterip }}
            {{- range .Values.service.clusterip }}
            - name: {{ .name }}
              containerPort: {{ .port }}
            {{- end }}
            {{- end }}
          {{- end }}
          {{- if .Values.probes.readiness.enabled }}
          # Readiness Probe
          readinessProbe:
            {{- if eq .Values.probes.readiness.type "tcp" }}
            tcpSocket:
              port: {{ .Values.probes.readiness.tcpPort }}
            {{- else if eq .Values.probes.readiness.type "http" }}
            httpGet:
              path: {{ .Values.probes.readiness.httpPath }}
              port: {{ .Values.probes.readiness.httpPort }}
            {{- else if eq .Values.probes.readiness.type "exec" }}
            exec:
              command:
              {{- toYaml .Values.probes.readiness.execCommands | nindent 14 }}
            {{- end }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            successThreshold: {{ .Values.probes.readiness.successThreshold }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
          {{- end }}

          securityContext:
            capabilities:
              add:
                - IPC_LOCK

          {{- if .Values.probes.liveness.enabled }}
          # Liveness Probe
          livenessProbe:
            {{- if eq .Values.probes.liveness.type "tcp" }}
            tcpSocket:
              port: {{ .Values.probes.liveness.tcpPort }}
            {{- else if eq .Values.probes.liveness.type "http" }}
            httpGet:
              path: {{ .Values.probes.liveness.httpPath }}
              port: {{ .Values.probes.liveness.httpPort }}
            {{- else if eq .Values.probes.liveness.type "exec" }}
            exec:
              command:
              {{- toYaml .Values.probes.liveness.execCommands | nindent 14 }}
            {{- end }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            successThreshold: {{ .Values.probes.liveness.successThreshold }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          {{- end }}

          {{- if .Values.probes.startup.enabled }}
          # Startup Probe
          startupProbe:
            {{- if eq .Values.probes.startup.type "tcp" }}
            tcpSocket:
              port: {{ .Values.probes.startup.tcpPort }}
            {{- else if eq .Values.probes.startup.type "http" }}
            httpGet:
              path: {{ .Values.probes.startup.httpPath }}
              port: {{ .Values.probes.startup.httpPort }}
            {{- else if eq .Values.probes.startup.type "exec" }}
            exec:
              command:
              {{- toYaml .Values.probes.startup.execCommands | nindent 14 }}
            {{- end }}
            initialDelaySeconds: {{ .Values.probes.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.startup.timeoutSeconds }}
            successThreshold: {{ .Values.probes.startup.successThreshold }}
            failureThreshold: {{ .Values.probes.startup.failureThreshold }}
          {{- end }}

          volumeMounts:
            - name: podinfo
              mountPath: /etc/podinfo
              readOnly: false
            {{- if .Values.storage.enabled }}              
            {{- range .Values.storage.volumes }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              readOnly: {{ .readOnly }}
            {{- end }}
      volumes:
      # Insert our pre-baked Redis configuration file into /conf/redis.conf
      - name: conf
        configMap:
          name: redis-cluster-config
          items: 
          - key: redis.conf
            path: redis.conf
          - key: bootstrap-pod.sh  # TODO: Move this or extract it into its own Docker image
            path: bootstrap-pod.sh
      # The init container will use this info to find cluster peers
      - name: podinfo
        downwardAPI:
          items:
            - path: "labels"
              fieldRef:
                fieldPath: metadata.labels
            - path: "annotations"
              fieldRef:
                fieldPath: metadata.annotations
            - path: "pod_name"
              fieldRef:
                fieldPath: metadata.name
            - path: "pod_namespace"
              fieldRef:
                fieldPath: metadata.namespace
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "local-path"
      resources:
        requests:
          storage: 1Gi
            {{- end}}
{{- end }}

