{{- if eq .Values.type "statefulset" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}
spec:
  podManagementPolicy: OrderedReady
  {{- if .Values.service.clusterip }}
  serviceName: "{{ .Release.Name }}-clusterip"
  {{- end}}
  replicas: {{ .Values.replicaCount }}

  {{- if .Values.storage.enabled }}
  {{- if eq .Values.type "statefulset" }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain
  volumeClaimTemplates:
    {{- range .Values.storage.volumes }}
    {{- if eq .type "template" }}
    - metadata:
        name: {{ .name }}
      spec:
        accessModes: {{ .accessModes | toYaml | nindent 10 }}
        storageClassName: {{ .storageClass }}
        resources:
          requests:
            storage: {{ .size | default "1Gi" }}
    {{- end }}
    {{- end }}
  {{- end }}
  {{- end }}

  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ .Release.Name }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      initContainers:
        {{- toYaml .Values.initContainers | nindent 8 }}
      {{- end }}
      containers:
          # Name  
        - name: {{ .Release.Name }}
        
          # Image
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"

          # Environment Variables
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: PUID
              value: "556"
            - name: PGID
              value: "556"
            - name: TZ
              value: "GB"
            {{- if .Values.containerEnvs }}
            {{- range .Values.containerEnvs }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            {{- end }}
            {{- if .Values.containerEnvsConfigMap }}
            {{- range .Values.containerEnvsConfigMap }}
            - name: {{ .name }}
              valueFrom:
                configMapKeyRef:
                  name: {{ .configMap }}
                  key: {{ .name }}
            {{- end }}
            {{- end }}

          # Resources      
          {{- if .Values.resources.enabled }}
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
              # gpu: {{ .Values.resources.limits.gpu }}
          {{- end }}

          # Commands
          {{- if .Values.containerCommands }}
          command:
          {{- toYaml .Values.containerCommands | nindent 12 }}
          {{- end }}

          # Args
          {{- if .Values.containerArgs }}
          args:
          {{- toYaml .Values.containerArgs | nindent 12 }}
          {{- end }}
          {{- if .Values.service.enabled }}

          # Ports     
          ports:
            {{- if .Values.service.loadbalancer }}
            {{- range .Values.service.loadbalancer }}
            - name: {{ .name }}
              containerPort: {{ .port }}
            {{- end }}
            {{- end }}
            {{- if .Values.service.clusterip }}
            {{- range .Values.service.clusterip }}
            - name: {{ .name }}
              containerPort: {{ .port }}
            {{- end }}
            {{- end }}
          # Security Context
          securityContext:
            # runAsUser: 1000
            # runAsGroup: 1000
            # fsGroup: 1000
            # fsGroupChangePolicy: "Always"
            # runAsNonRoot: true
            # allowPrivilegeEscalation: true
            # privileged: true
            # readOnlyRootFilesystem: true
            # seLinuxOptions: null
            # seccompProfile:
            #   type: RuntimeDefault
            capabilities:
              drop:
              - ALL
              add:
              {{- range .Values.securityContext.capabilities }}
              - {{ . }}
              {{- end }}

          {{- if .Values.probes.readiness.enabled }}
          # Readiness Probe
          readinessProbe:
            {{- if eq .Values.probes.readiness.type "tcp" }}
            tcpSocket:
              port: {{ .Values.probes.readiness.tcpPort }}
            {{- else if eq .Values.probes.readiness.type "http" }}
            httpGet:
              path: {{ .Values.probes.readiness.httpPath }}
              port: {{ .Values.probes.readiness.httpPort }}
            {{- else if eq .Values.probes.readiness.type "exec" }}
            exec:
              command:
              {{- toYaml .Values.probes.readiness.execCommands | nindent 14 }}
            {{- end }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            successThreshold: {{ .Values.probes.readiness.successThreshold }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
          {{- end }}

          {{- if .Values.probes.liveness.enabled }}
          # Liveness Probe
          livenessProbe:
            {{- if eq .Values.probes.liveness.type "tcp" }}
            tcpSocket:
              port: {{ .Values.probes.liveness.tcpPort }}
            {{- else if eq .Values.probes.liveness.type "http" }}
            httpGet:
              path: {{ .Values.probes.liveness.httpPath }}
              port: {{ .Values.probes.liveness.httpPort }}
            {{- else if eq .Values.probes.liveness.type "exec" }}
            exec:
              command:
              {{- toYaml .Values.probes.liveness.execCommands | nindent 14 }}
            {{- end }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            successThreshold: {{ .Values.probes.liveness.successThreshold }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          {{- end }}

          {{- if .Values.probes.startup.enabled }}
          # Startup Probe
          startupProbe:
            {{- if eq .Values.probes.startup.type "tcp" }}
            tcpSocket:
              port: {{ .Values.probes.startup.tcpPort }}
            {{- else if eq .Values.probes.startup.type "http" }}
            httpGet:
              path: {{ .Values.probes.startup.httpPath }}
              port: {{ .Values.probes.startup.httpPort }}
            {{- else if eq .Values.probes.startup.type "exec" }}
            exec:
              command:
              {{- toYaml .Values.probes.startup.execCommands | nindent 14 }}
            {{- end }}
            initialDelaySeconds: {{ .Values.probes.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.startup.timeoutSeconds }}
            successThreshold: {{ .Values.probes.startup.successThreshold }}
            failureThreshold: {{ .Values.probes.startup.failureThreshold }}
          {{- end }}

          volumeMounts:
            {{- range .Values.storage.volumes }}
            {{- if ne .type "template" }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              readOnly: {{ .readOnly | default false }}
            {{- end }}
            {{- end }}

      volumes:
        {{- range .Values.storage.volumes }}
        {{- if eq .type "configMap" }}
        - name: {{ .name }}
          configMap:
            name: {{ .configMapName }}
            items:
              {{- range .items }}
              - key: {{ .key }}
                path: {{ .path }}
              {{- end }}
        {{- else if eq .type "emptyDir" }}
        - name: {{ .name }}
          emptyDir:
            {{- if .ramDisk }}
            medium: "Memory"
            {{- end }}
            {{- if .sizeLimit }}
            sizeLimit: {{ .sizeLimit }}
            {{- end }}
        {{- else if eq .type "downwardAPI" }}
        - name: {{ .name }}
          downwardAPI:
            items:
              {{- range .items }}
              - path: {{ .path }}
                fieldRef:
                  fieldPath: {{ .fieldRef.fieldPath }}
              {{- end }}
        {{- end }}
        {{- end }}
{{- end }}