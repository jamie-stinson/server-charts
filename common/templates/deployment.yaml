apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ .Release.Name }}
      containers:
        - name: {{ .Release.Name }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          env:
            - name: UID
              value: "556"
            - name: GID
              value: "556"
            {{- if .Values.containerEnvs }}
            {{- range .Values.containerEnvs }}
            - name: {{ .name }}
              value: {{ .value }}
            {{- end }}
            {{- end }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - all  
            runAsNonRoot: true
            runAsUser: 556
            runAsGroup: 556
            fsGroup: 556
            fsGroupChangePolicy: "Always"
            seccompProfile:
              type: RuntimeDefault
          {{- if .Values.resources.enabled }}
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
              gpu: {{ .Values.resources.limits.gpu }}
          {{- end }}
          {{- if or .Values.containerArgs (eq .Release.Name "traefik") }}
          args:
            {{- if .Values.containerArgs }}
            # Container Args
            {{- toYaml .Values.containerArgs | nindent 12 }}
            {{- end }}

            {{- if eq .Release.Name "traefik" }}
            # Traefik
            - --global.checknewversion=false
            - --global.sendanonymoususage=false
            - --accesslog.format={{ .Values.traefik.accessLogFormat }}
            - --log.format={{ .Values.traefik.logFormat }}
            - --log.level={{ .Values.traefik.logLevel }}
            - --api.dashboard=false
            - --ping
            - --providers.kubernetescrd
            {{- range .Values.traefik.entrypoints }}
            - --entryPoints.{{ .name }}.address=:{{ .port }}/{{ lower .protocol }}
              {{- if .redirectToEntrypoint }}
            - --entrypoints.{{ .name }}.http.redirections.entryPoint.to={{ .redirectToEntrypoint }}
              {{- end }}
            {{- end }}                
            {{- end }}

          {{- end }}
          {{- if .Values.service.enabled }}
          ports:
            {{- if .Values.service.loadbalancer }}
            {{- range .Values.service.loadbalancer }}
            - name: {{ .name }}
              containerPort: {{ .port }}
            {{- end }}
            {{- end }}
            {{- if .Values.service.clusterip }}
            {{- range .Values.service.clusterip }}
            - name: {{ .name }}
              containerPort: {{ .port }}
            {{- end }}
            {{- end }}
          {{- end }}
          {{- if .Values.probes.readiness.enabled }}
          # Readiness Probe
          readinessProbe:
            {{- if eq .Values.probes.readiness.type "tcp" }}
            tcpSocket:
              port: {{ .Values.probes.readiness.tcpPort }}
            {{- else if eq .Values.probes.readiness.type "http" }}
            httpGet:
              path: {{ .Values.probes.readiness.httpPath }}
              port: {{ .Values.probes.readiness.httpPort }}
            {{- else if eq .Values.probes.readiness.type "exec" }}
            exec:
              command:
                - {{ .Values.probes.readiness.execCommand }}
            {{- end }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            successThreshold: {{ .Values.probes.readiness.successThreshold }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
          {{- end }}

          {{- if .Values.probes.liveness.enabled }}
          # Liveness Probe
          livenessProbe:
            {{- if eq .Values.probes.liveness.type "tcp" }}
            tcpSocket:
              port: {{ .Values.probes.liveness.tcpPort }}
            {{- else if eq .Values.probes.liveness.type "http" }}
            httpGet:
              path: {{ .Values.probes.liveness.httpPath }}
              port: {{ .Values.probes.liveness.httpPort }}
            {{- else if eq .Values.probes.liveness.type "exec" }}
            exec:
              command:
                - {{ .Values.probes.liveness.execCommand }}
            {{- end }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            successThreshold: {{ .Values.probes.liveness.successThreshold }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          {{- end }}

          {{- if .Values.probes.startup.enabled }}
          # Startup Probe
          startupProbe:
            {{- if eq .Values.probes.startup.type "tcp" }}
            tcpSocket:
              port: {{ .Values.probes.startup.tcpPort }}
            {{- else if eq .Values.probes.startup.type "http" }}
            httpGet:
              path: {{ .Values.probes.startup.httpPath }}
              port: {{ .Values.probes.startup.httpPort }}
            {{- else if eq .Values.probes.startup.type "exec" }}
            exec:
              command:
                - {{ .Values.probes.startup.execCommand }}
            {{- end }}
            initialDelaySeconds: {{ .Values.probes.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.startup.timeoutSeconds }}
            successThreshold: {{ .Values.probes.startup.successThreshold }}
            failureThreshold: {{ .Values.probes.startup.failureThreshold }}
          {{- end }}

          {{- if .Values.storage.enabled }}
          volumeMounts:
            {{- range .Values.storage.volumes }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              readOnly: {{ .readOnly }}
            {{- end }}
      volumes:
      {{- range .Values.storage.volumes }}
        - name: {{ .name }}
          {{- if eq .type "host" }}
          hostPath:
            path: {{ .hostPath }}
          {{- else if eq .type "emptyDir" }}
          emptyDir:
            sizeLimit: {{ .size }}
          {{- end }}
      {{- end}}
          {{- end}}