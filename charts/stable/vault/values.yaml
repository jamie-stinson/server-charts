type: statefulset
replicaCount: 3

podDisruptionBudget: 0
terminationGracePeriodSeconds: 10

containerEnvs:
  - name: POSTGRES_DB
    value: "postgres"
  - name: PGUSER
    value: "postgres"
  - name: POSTGRES_USER
    value: "postgres"

containerEnvsSecret:
  - name: POSTGRES_PASSWORD
    key: password
    secret: postgres
  - name: REPLICATION_PASSWORD
    key: replicaPassword
    secret: postgres
  - name: RADARR_DATABASE_PASSWORD
    key: DATABASE_PASSWORD
    secret: radarr-database-credentials

securityContext:
  user: 70

initContainers:
  - name: db-init # using root, change permissions to not use root in main container. Fairly certain this is because can't use fs-group change with local path provisioner so when move from that could remove this?
    image: postgres
    command: 
      - 'sh'
      - '-c'
      - |
        chown -R 70:70 /var/lib/postgresql/data && chown -R 70:70 /var/run/postgresql
    volumeMounts:
      - name: datadir
        mountPath: /var/lib/postgresql/data
      - name: postgres
        mountPath: /var/run/postgres     

configMaps:
  - name: postgresql-cluster-config
    data:
      config.hcl: |
        ui            = true
        cluster_addr  = "https://127.0.0.1:8201"
        api_addr      = "https://127.0.0.1:8200"
        disable_clustering = false
        disable_mlock = false
        disable_cache = false
        cluster_name = "POC"
        log_level = "trace"
        log_format = ""
        log_file = ""
        log_rotate_duration = 
        log_rotate_bytes = 
        log_rotate_max_files =

        default_lease_ttl = "24h"
        max_lease_ttl     = "24h"
        default_max_request_duration = "90s"

        storage "" {
        }

        user_lockout "all" {
          lockout_duration = "10m"
          lockout_counter_reset = "10m"
        }

        seal {}

        listener "tcp" {
          address     = "127.0.0.1:8200"
          tls_disable = false
          tls_cert_file = "/etc/vault.d/ssl/tls.crt"
          tls_key_file = "/etc/vault.d/ssl/tls.key"
          tls_client_ca_file = "/etc/vault.d/ssl/tls_ca.pem"
          tls_cipher_suites = "TLS_TEST_128_GCM_SHA256,
                                TLS_TEST_128_GCM_SHA256,
                                TLS_TEST20_POLY1305,
                                TLS_TEST_256_GCM_SHA384,
                                TLS_TEST20_POLY1305,
                                TLS_TEST_256_GCM_SHA384"
          }
        }

probes:
  readiness:
    enabled: true
    type: "exec"
    execCommands: 
      - sh
      - -c
      - exec pg_isready --host $POD_IP
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3
  liveness:
    enabled: true
    type: "exec"
    execCommands: 
      - sh
      - -c
      - exec pg_isready --host $POD_IP
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6

resources:
  enabled: true
  requests:
    cpu: "100m"
    memory: "256Mi"
  limits:
    cpu: "100m"
    memory: "256Mi"

image:
  registry: "docker.io"
  repository: "postgres"
  tag: "16.2-alpine"

service:
  enabled: true
  headless: true
  clusterip:
    - name: client
      protocol: TCP
      port: 5432

storage:
  enabled: true
  volumes:
    - name: "config"
      type: "configMap"
      readOnly: true
      mountPath: "/docker-entrypoint-initdb.d"
      configMapName: "postgresql-cluster-config"
      items:
        - key: "master-slave-config.sh"
          path: "master-slave-config.sh"
        - key: "create-replication-role.sql"
          path: "create-replication-role.sql"
    - name: datadir
      type: "template"
      mountPath: "/var/lib/postgresql/data"
      accessModes:
      - ReadWriteOnce
      storageClass: "local-path"
      readOnly: false
    - name: "postgres"
      type: "emptyDir"
      mountPath: "/var/run/postgresql"
      readOnly: false
    - name: "postgres-config"
      type: "emptyDir"
      mountPath: "/etc/postgresql"
      readOnly: false

