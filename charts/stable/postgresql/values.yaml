type: statefulset
replicaCount: 3

podDisruptionBudget: 0
terminationGracePeriodSeconds: 10

containerEnvs:
  - name: POSTGRES_DB
    value: "postgres"
  - name: PGUSER
    value: "postgres"
  - name: POSTGRES_USER
    value: "postgres"

containerEnvsSecret:
  - name: POSTGRES_PASSWORD
    key: password
    secret: postgres
  - name: REPLICATION_PASSWORD
    key: replicaPassword
    secret: postgres

securityContext:
  user: 556

initContainers:
  - name: db-init    # using root, change permissions to not use root in main container
    image: postgres
    command: 
      - 'sh'
      - '-c'
      - |
        chown -R 556:556 /var/lib/postgresql/data
    volumeMounts:
      - name:  datadir
        mountPath: /var/lib/postgresql/data

configMaps:
  - name: postgresql-cluster-config
    data:
      master-slave-config.sh: |
        HOST=`hostname -s`
        ORD=${HOST##*-}
        HOST_TEMPLATE=${HOST%-*}
        case $ORD in
          0)
          echo "host    replication     all     all     md5" >> /var/lib/postgresql/data/pg_hba.conf
          echo "archive_mode = on"  >> /etc/postgresql/postgresql.conf
          echo "archive_mode = on"  >> /etc/postgresql/postgresql.conf
          echo "archive_command = '/bin/true'"  >> /etc/postgresql/postgresql.conf
          echo "archive_timeout = 0"  >> /etc/postgresql/postgresql.conf
          echo "max_wal_senders = 8"  >> /etc/postgresql/postgresql.conf
          echo "wal_keep_segments = 32"  >> /etc/postgresql/postgresql.conf
          echo "wal_level = hot_standby"  >> /etc/postgresql/postgresql.conf
          ;;
          *)
          # stop initial server to copy data
          pg_ctl -D /var/lib/postgresql/data/ -m fast -w stop
          rm -rf /var/lib/postgresql/data/*
          # add service name for DNS resolution
          PGPASSWORD=k8s-postgres-ha pg_basebackup -h ${HOST_TEMPLATE}-0.postgresql-clusterip -w -U replicator -p 5432 -D /var/lib/postgresql/data -Fp -Xs -P -R
          # start server to keep container's screep happy
          pg_ctl -D /var/lib/postgresql/data/ -w start
          ;;
        esac
      create-replication-role.sql: |-
        CREATE USER replicator WITH REPLICATION ENCRYPTED PASSWORD 'k8s-postgres-ha';
probes:
  readiness:
    enabled: true
    type: "exec"
    execCommands: 
      - sh
      - -c
      - exec pg_isready --host $POD_IP
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3
  liveness:
    enabled: true
    type: "exec"
    execCommands: 
      - sh
      - -c
      - exec pg_isready --host $POD_IP
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6

resources:
  enabled: true
  requests:
    cpu: "100m"
    memory: "256Mi"
  limits:
    cpu: "100m"
    memory: "256Mi"
    gpu: "0"

image:
  registry: "docker.io"
  repository: "postgres"
  tag: "16.2-alpine"

service:
  enabled: true
  headless: true
  publishNotReadyAddresses: true
  clusterip:
    - name: client
      protocol: TCP
      port: 5432

storage:
  enabled: true
  volumes:
    - name: "config"
      type: "configMap"
      readOnly: true
      mountPath: "/docker-entrypoint-initdb.d"
      configMapName: "postgresql-cluster-config"
      items:
        - key: "master-slave-config.sh"
          path: "master-slave-config.sh"
        - key: "create-replication-role.sql"
          path: "create-replication-role.sql"
    - name: datadir
      type: "template"
      mountPath: "/var/lib/postgresql/data"
      accessModes:
      - ReadWriteOnce
      storageClass: "local-path"
      readOnly: false
    - name: "postgres"
      type: "emptyDir"
      mountPath: "/var/run/postgresql"
      readOnly: false
    - name: "postgres-config"
      type: "emptyDir"
      mountPath: "/etc/postgresql"
      readOnly: false

