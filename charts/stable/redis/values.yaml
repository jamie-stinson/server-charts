type: statefulset
replicaCount: 6

podDisruptionBudget:
  maxUnavailable: 0
terminationGracePeriodSeconds: 10

containerEnvs:
  - name: NUM_SHARDS
    value: "3"  # If you modify this value, make sure there are at least 2 times the number of replicas

containerCommands:
  - sh
containerArgs:
  - /conf/bootstrap-pod.sh

configMaps:
  - name: redis-cluster-config
    data:
      redis.conf: |
        cluster-enabled yes
        cluster-require-full-coverage no
        cluster-node-timeout 15000
        cluster-config-file nodes.conf
        cluster-migration-barrier 1 
        appendonly yes
        # Other cluster members need to be able to connect
        protected-mode no
      bootstrap-pod.sh: |
        #!/bin/sh
        set -ex

        # Find which member of the Stateful Set this pod is running
        # e.g. "redis-cluster-0" -> "0"
        PET_ORDINAL=$(cat /etc/podinfo/pod_name | rev | cut -d- -f1)
        MY_SHARD=$(($PET_ORDINAL % $NUM_SHARDS))

        redis-server /conf/redis.conf &
    
        # TODO: Wait until redis-server process is ready
        sleep 1

        if [ $PET_ORDINAL -lt $NUM_SHARDS ]; then
          # Set up primary nodes. Divide slots into equal(ish) contiguous blocks
          NUM_SLOTS=$(( 16384 / $NUM_SHARDS ))
          REMAINDER=$(( 16384 % $NUM_SHARDS ))
          START_SLOT=$(( $NUM_SLOTS * $MY_SHARD + ($MY_SHARD < $REMAINDER ? $MY_SHARD : $REMAINDER) ))
          END_SLOT=$(( $NUM_SLOTS * ($MY_SHARD+1) + ($MY_SHARD+1 < $REMAINDER ? $MY_SHARD+1 : $REMAINDER) - 1 ))

          PEER_IP=$(perl -MSocket -e "print inet_ntoa(scalar(gethostbyname(\"redis-cluster-0.redis-cluster.$POD_NAMESPACE.svc.cluster.local\")))")
          redis-cli cluster meet $PEER_IP 6379
          redis-cli cluster addslots $(seq $START_SLOT $END_SLOT)
        else
          # Set up a replica
          PEER_IP=$(perl -MSocket -e "print inet_ntoa(scalar(gethostbyname(\"redis-cluster-$MY_SHARD.redis-cluster.$POD_NAMESPACE.svc.cluster.local\")))")
          redis-cli --cluster add-node localhost:6379 $PEER_IP:6379 --cluster-slave
        fi

        wait

probes:
  readiness:
    enabled: true
    type: "exec"
    execCommands: 
      - sh
      - -c
      - "redis-cli -h $(hostname) ping"
    initialDelaySeconds: 5
    periodSeconds: 20
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  liveness:
    enabled: true
    type: "exec"
    execCommands: 
      - sh
      - -c
      - "redis-cli -h $(hostname) ping"
    initialDelaySeconds: 20
    periodSeconds: 3
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  startup:
    enabled: false

initContainers:
    # Wait for the redis-cluster service to exist. We need it to resolve the hostnames of our nodes
  - name: init-redis-cluster
    image: busybox:1.28
    command: ['sh', '-c', "until nslookup redis-cluster.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for redis-cluster; sleep 2; done"]

image:
  registry: "docker.io"
  repository: "redis"
  tag: "7.2.4"

service:
  enabled: true
  headless: true
  publishNotReadyAddresses: true
  clusterip:
    - name: client
      protocol: TCP
      port: 6379
    - name: gossip
      protocol: TCP
      port: 16379

storage:
  enabled: false
  volumes:
    - name: "data"
      type: "pvc"
      mountPath: "/var/lib/postgresql/data"
      readOnly: false